Access Specifiers
	AS			C	P	S	W
	Public		y	y	y	y
	Protected	y	y	y
	No modifier y	y
	Private		Y


Oops Concepts:

Inheritance:
- The process of acquiring the properties from one class (parent/base/super class) into another class(child/derived/sub class) using "extends" keyword
1. "Super" keyword 
   - is used to differentiate the members(variables & methods) of Super class from the Subclass if they are having same names (super.<method()/variable>
   - is also used to invoke the Superclass constructor from Subclass (super())
2. Types: Single Inheritance (Single level)
		  Mutli level Inheritance (multiple level)
		  Hierarchichal Inheritance (class sub extends Base, class sub1 extends Base)
		  MULITPLE INHERITANCE is implemented through Interfaces
		  
Overriding:		  
- Ability to define a behaviour thats specific to Subclass type, which means a Subclass can implement Parentclass method based on its requirement (Overriding means overriding the functionality of an existing method)
    
	public class TestDog {

      public static void main(String args[]) {
        Animal a = new Animal();   // Animal reference and object		# "Animal is the BaseClass" and "Dog is the DerivedClass"
        Animal b = new Dog();   // Animal reference but Dog object		# "TestDog" Class is in the same Package

        a.move();   // runs the method in Animal class
        b.move();   // runs the method in Dog class
      }
    }

	At compile time, the check is made on the ReferenceType(Class). But on the runtime the Check is made on the ObjectType(Constructor)
	
- 	  { 
		Animal a = new Animal();   // Animal reference and object    # Animal Class(Base) methods - move()
		Animal b = new Dog();   // Animal reference but Dog object	 # Dog Class(Sub) methods - move(), bark()

		a.move();   // runs the method in Animal class
		b.move();   // runs the method in Dog class
		b.bark(); 
	  }													# Throws compile error Since b's reference type Animal doesnt have bark() method
	  
	- Arg. list should be same as that of the Overridden method
	- ReturnType should be same or subtype of the "ReturnType declared in the Original Overridden method in the Superclass"
	- Access level cant be more restrictive than the Overridden method's access level
	-*** Instance methods can be overridden only if they're inherited by the Subclass 
	- A method declared 'final' cant be overridden. But declared static cant be overridden but can be re-declared
	- A Subclass with in the same pkg as the Instance's superclass can override any superclass method that s not declared 'private or final'
	- A Subclass in a diff. pkg. can only override the non-final methods declared public or protected
	- Constructors cant be overridden

Polymorphism:

	Polymorphism is the ability to take on many forms. The most common use of polymorphism in OOP occurs when a ParentClass reference is used
	to refer to a ChildClass Object
	
	public class VirtualDemo {

		public static void main(String [] args) {
			Salary s = new Salary("Mohd Mohtashim", "Ambehta, UP", 3, 3600.00);  # Here the ReferenceType are different (ObjectTypes are same)
			Employee e = new Salary("John Adams", "Boston, MA", 2, 2400.00);	 #  where as in overriding the Object types are different (RTs are same)
			System.out.println("Call mailCheck using Salary reference --");   	 # Salary - DerivedClass, Employee - BaseClass
			s.mailCheck();
			System.out.println("\n Call mailCheck using Employee reference--");
			e.mailCheck();
		}
	}
	
	The behaviour is referred to as Virtual method invocation, and these methods are referred to as Virtual methods. An Overridden method is invoked 
	at runtime, no matter what data type the reference is that was used in the source code at compile time
	
Abstraction:
	
	Abstraction is a process of hiding the implementation details from the user, Only the functionality ll be provided to the user
	- User ll have the information of what the object does, instead of how it does it
	- Abstraction is achieved using Abstract Classes and Interfaces
	
	- To use an abstract class (declared as abstract class if it contains one abstract method / Abstract class may or may not contain Abstract methods)
	  we need to Inherit into another class, provide implementations to the abstract methods and use 'em from the object of derived class
	  
	ex: public abstract void check();  // Abstract method is nothing but a method without body
	
		public abstract class Employee { .. } // Abstract class declaration
	
Encapsulation:

	It s a mechanism of wrapping up of data (Variables) and code acting on the data (methods) together as a single unit. In Encapsulation, the variables
	of a class ll be hidden from other classes, and can be accessed through the methods of their current class. Therefore it s known as "DataHiding"
	
	To achieve Encapsulation:
	- Declare the Variables of the class as Private
	- Provide public getter and setter methods to modify and view the Variables Values
	
	Benefits of Encapsulation
	- The fields of a class can be made read-only /  write-only
	- A Class can have total control what is stored in its fields
	
Interface:

	Interface is a collection of Abstract Methods. Its a reference type in Java. 
	- Interface cant be instantiated. It cant be Inherited into a Class. But it can be INHERITED into ANOTHER INTERFACE. Class has to implement the Interface
	and need to define all the abstract methods which were in Interface. 
	- Interface may also contain Constants, Static methods and nested types.
	- Interface cant contain Constructors
	
	ex: public interface NameOfInterface {  ..  } // FileName: NameOfInterface.java
	
		public class Praveen implements NameOfInterface [, <Interface2>] //Class can implement any n.of Intefaces but can extend only one (satisfies multiple Inheritance)
		
		
	- 
	

	  
	  
	