Topics:

1. GIT Repo creation (git init [<repo-name>])
2. GIT Basics
	* Checking the "status/short status" of your files  (git status [-s])
	* Tracking new files && Staging modified files (git add)
	* Ignoring files (.gitignore)
	* Viewing Staged/Unstaged Changes (git diff [--cached])
	* Committing your changes && skipping the staging area (git commit [-a] [-m <msg>])
	* Removing Files "completely / from staging"(git rm [--cached] <filename>)
	* Moving Files (git mv <from> <to-name>)
3. Viewing the commit history (git log [-n <number>]/[--pretty=[oneline]])
4. Undoing things
	* Rectifying commit (git commit --ammend)
	* Unstaging a staged file (git reset HEAD <file-name)
	* Unmodifying a modified file (git checkout -- <file-name>)
5. Working with Remotes
	* Showing your remotes (git remote [-v])
	* Adding remote repos (git remote add <remote-name> <url>)
	* fetching & pulling remote repos (git fetch <remote-name> & git pull <remote-name>)
	* Pushing to your remotes (git push <remote> <branch>) ex: git push origin master
	* Inspecting a remote (git remote show <remote-name>)
	* Removing & Renaming the remotes (git remote rename <from> <to-name> && git remote remove <remote-name>)
6. Tagging
	* listing the tags (git tags)
	* creating annotated tags (git tag -a <tag-name> -m <commit-msg>) - Stored as full objects in db
	* creating lightweight tags (git tag <tag-name> -lw ) - Just a pointer sets to the commit object
	* Tagging later (git tag -a <tag-name> <checksum>)
	* Sharing Tags (git push <remote-name> <tag-name>)
	  - Pushing all @ once (git push <remote-name> --tags)
	* Deleting tags (git tag -d <tag-name>)
	* Checking out tags - Commits are recorded but cant be shown in history. So create a branch out of it
	  - git checkout -b <branch> <tag-name> = git branch <branch> <tag-name> && git checkout <branch>
7. Git aliases - (git config --global alias.co clone)
8. Branches in a nutshell
	* 
	*
	*		CommitObject ---> Snapshot(tree) ---> Blobs (one blob for each file)
	*		TREE, author		blob & its		  changes
	*		committer, 			checksums
	*		commit msg
	*
	*
9. Creating a New Branch (git branch <branch-name>)
10. Switching b/n branches (git checkout <branch-name>) 
	* to check the graph (git log --oneline --decorate)
11. Basic Branching & merging
	* shortcut - git checkout -b <branch>
	* delete branch - git branch -d <branch>
	* merging - git merge <branch>
	  - Checkout the branch you merge into (master) and run 'git merge' command
	  - goto the branch with previous/past commits and get the new branch merged
	  - then delete the branch merged into base if needed
	* merge conflicts can be resolved using cli configured tools
12. Branch Management
	* list the branches (git branch)
	* To see the last commit on each branch (git branch -v)
	* To see the merged branches (git branch --merged)
	* To see the non merged branches (git branch --no-merged)
13. Topic branches (short-lived branches ex: iss53)
14. Remote Branches
	* master in wc --> origin/master in server
		- "master branch" in server is RemoteBranch
		- "origin/master branch" in server is said to be Remote tracking branch
	* we can fetch more than one remote in our working copies (think of creating remote from master, push it and fetch into wc)
15. Pushing Branches
	* git push <remote> <branch> - pushes the commits into the server (git push origin serverfix:serverfix, git push origin serverfix:awesomebranch)
	* git push - automatically detects and pushes the commits
	* git fetch origin
	  remote: Counting objects: 7, done.
	  remote: Compressing objects: 100% (2/2), done.
	  remote: Total 3 (delta 0), reused 3 (delta 0)
	  Unpacking objects: 100% (3/3), done.
	  From https://github.com/schacon/simplegit
	  * [new branch]      serverfix    -> origin/serverfix
	  
	  To work on serverfix, do either of these
		- git merge origin/serverfix
		- git checkout -b serverfix origin/serverfix (as its there in local wc)
16. Deleting remote branches (git push <remote(origin)> --delete <branch-name>)	
17. Tracking Branches
	* Checking a local branch from a remote-tracking branch automatically creates a branch called "Tracking branch"
	git checkout -b <branch> <remote>/<branch> (git checkout -b serverfix origin/serverfix)
	~ 	git checkout --track origin/serverfix
	~	git checkout serverfix
	~	git branch -u origin/serverfix			- This is nothing but setting the existing local branch to the desired remote branch
	~	git checkout -b sf origin/serverfix
	
	* To see tracking branches we have setup. Along with that this ll list the local branches with the info. including 'what each branch is tracking'
	  and if your local branch  is ahead, behind or both
	  
	  git branch -vv (tells according to the Info. obtained from last time server communication)
	  git fecth --all ; git branch -vv (gives the updated info)

18. Rebasing
	* In experiment branch: git rebase master ; git checkout master ; git merge experiment
	  - Whatever the branch you wish to rebase onto other (master), checkout the branch and then rebase (git rebase master)
	  - Whatever the branch you wish to merge into, checkout the branch (master) and perform the command 'git merge <branch-name>' (git merge experiment)
	* git rebase --onto master server client
	  - Take the changes on client but not on server and replay them on master
	  - Then checkout master and merge client
	** rebasing the branch without checkout
	  - git rebase <baseBranch> <topicBranch>
	  - checksout the topicBranch and then rebases the Base Branch
	  
Info: 
	When cloned a repository from git, we will not be getting all the branches excpet master. To work on the other branches with those changes..
	- git clone <url>
	- git checkout -b <branch-name> --track origin/<branch-name>
	
	Cloning a Single branch: 
	- git clone --single-branch -branch <branch-name> <url>
	
	To set the different tracking remote for the local branch
	- git push --set-upstream origin <branch-name>
	  